datasource db {
  provider = "postgresql" // or your preferred database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "true"
  prettier                        = "false"
  forceIdOnConnect                = "false"
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String?
  company     String
  contacts    Contact[]
  addresses   Address[]
  hierarchy   Hierarchy? @relation(fields: [hierarchyId], references: [id])
  hierarchyId Int?
  services    Service[]
  agreements  Agreement[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  isPrimary   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id          Int       @id @default(autoincrement())
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  latitude    Float?
  longitude   Float?
  isPrimary   Boolean
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Hierarchy {
  id          Int       @id @default(autoincrement())
  level       String
  parentId    Int?
  parent      Hierarchy? @relation("HierarchyToParent", fields: [parentId], references: [id])
  children    Hierarchy[] @relation("HierarchyToParent")
  customers   Customer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  sla         SLA[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SLA {
  id          Int       @id @default(autoincrement())
  parameter   String
  value       String
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Agreement {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}