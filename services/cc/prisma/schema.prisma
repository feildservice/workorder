datasource db {
  provider = "postgresql" // or your preferred database provider
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/generated/prismagraphql"
  reExport = Directories
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "true"
  prettier                        = "false"
  forceIdOnConnect                = "false"
}

enum CompanyStatus {
  NEW
  ONBOARDING
  ACTIVE
  HOLD
  INACTIVE
}

enum OranizationStatus {
  NEW
  ONBOARDING
  ACTIVE
  HOLD
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  NOTMENTIONED
}

enum UserRole {
  ADMIN
  FIELD_TECHNICIAN
  CUSTOMER_AGENT
  SERVICE_MANAGER
  SERVICE_DISPATCHER
  CUSTOMER
}

model Organization {
  id            Int               @id @default(autoincrement())
  name          String            @db.VarChar(150)
  description   String?           @db.VarChar(150)
  domain        String            @db.VarChar(150)
  address       String?           @db.VarChar(150)
  city          String?           @db.VarChar(150)
  country       String?           @db.VarChar(150)
  zipcode       String?           @db.VarChar(50)
  email         String            @unique @db.VarChar(150)
  phone         String?           @db.VarChar(50)
  company       String            @db.VarChar(150)
  website       String?           @db.VarChar(150)
  linkedinUrl   String            @db.VarChar(150)
  taxIdentifier String?           @db.VarChar(10)
  logo          OrganizationLogo?
  customers     Customer[]
  // contacts    Contact[]
  // addresses   Address[]
  // services    Service[]
  status        OranizationStatus @default(ACTIVE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Customer {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(150)
  description    String?       @db.VarChar(150)
  domain         String        @db.VarChar(150)
  industry       String?       @db.VarChar(150)
  founded        String?       @db.VarChar(10)
  address        String?       @db.VarChar(150)
  city           String?       @db.VarChar(150)
  country        String?       @db.VarChar(150)
  zipcode        String?       @db.VarChar(50)
  email          String        @unique @db.VarChar(150)
  phone          String?       @db.VarChar(50)
  company        String        @db.VarChar(150)
  website        String?       @db.VarChar(150)
  linkedinUrl    String        @db.VarChar(150)
  taxIdentifier  String?       @db.VarChar(10)
  size           String?       @db.VarChar(15)
  revenue        String?       @db.VarChar(10)
  logo           Logo?
  contacts       Contact[]
  addresses      Address[]
  hierarchy      Hierarchy?    @relation(fields: [hierarchyId], references: [id])
  hierarchyId    Int?
  services       Service[]
  agreements     Agreement[]
  status         CompanyStatus @default(ACTIVE)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Contact {
  id          Int      @id @default(autoincrement())
  firstName   String   @db.VarChar(150)
  middleName  String?  @db.VarChar(150)
  lastName    String   @db.VarChar(150)
  title       String   @db.VarChar(15)
  gender      Gender   @default(MALE)
  email       String   @unique @db.VarChar(150)
  phone       String?  @db.VarChar(50)
  designation String?  @db.VarChar(100)
  avatar      Avatar?
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  isPrimary   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String   @db.VarChar(150)
  city       String   @db.VarChar(150)
  state      String   @db.VarChar(150)
  zipcode    String   @db.VarChar(12)
  country    String   @db.VarChar(150)
  latitude   Float?
  longitude  Float?
  isPrimary  Boolean
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Hierarchy {
  id        Int         @id @default(autoincrement())
  level     String
  parentId  Int?
  parent    Hierarchy?  @relation("HierarchyToParent", fields: [parentId], references: [id])
  children  Hierarchy[] @relation("HierarchyToParent")
  customers Customer[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  description String   @db.VarChar(500)
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  sla         SLA[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SLA {
  id        Int      @id @default(autoincrement())
  parameter String   @db.VarChar(150)
  value     String   @db.VarChar(150)
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agreement {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(150)
  description String   @db.VarChar(500)
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Logo {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(150)
  src        String   @db.VarChar(150)
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
}

model OrganizationLogo {
  id             Int          @id @default(autoincrement())
  title          String       @db.VarChar(150)
  src            String       @db.VarChar(150)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique
}

model Avatar {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(150)
  src       String  @db.VarChar(150)
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int     @unique
}

enum AgentType {
  CUSTOMER_AGENT
  FIELD_TECHNICIAN
}

model Agent {
  id                 Int              @id @default(autoincrement())
  firstName          String           @db.VarChar(150)
  middleName         String?          @db.VarChar(150)
  lastName           String           @db.VarChar(150)
  title              String           @db.VarChar(15)
  gender             Gender           @default(MALE)
  email              String           @unique @db.VarChar(150)
  phone              String?          @db.VarChar(50)
  designation        String?          @db.VarChar(100)
  agentType          AgentType
  calendars          WorkCalendar[]
  serviceTerritories AgentTerritory[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model WorkCalendar {
  id        Int      @id @default(autoincrement())
  year      Int
  month     Int
  day       Int
  startTime DateTime
  endTime   DateTime
  available Boolean
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceTerritory {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(150)
  locality       String         @db.VarChar(150)
  city           String         @db.VarChar(150)
  state          String         @db.VarChar(150)
  country        String         @db.VarChar(150)
  isocode        String         @db.VarChar(50)
  latitude       Float
  longitude      Float
  subTerritories SubTerritory[]
}

model SubTerritory {
  id                Int              @id @default(autoincrement())
  name              String           @db.VarChar(150)
  locality          String           @db.VarChar(150)
  latitude          Float
  longitude         Float
  parentTerritory   ServiceTerritory @relation(fields: [parentTerritoryId], references: [id])
  parentTerritoryId Int
  agents            AgentTerritory[]
}

model AgentTerritory {
  id             Int          @id @default(autoincrement())
  agent          Agent        @relation(fields: [agentId], references: [id])
  agentId        Int
  subTerritory   SubTerritory @relation(fields: [subTerritoryId], references: [id])
  subTerritoryId Int
}
