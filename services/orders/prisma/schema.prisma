datasource db {
  provider = "postgresql" // or your preferred database provider
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/generated/prismagraphql"
  reExport = Directories
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "true"
  prettier                        = "false"
  forceIdOnConnect                = "false"
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  WORKORDER_CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  NORMAL
  EXPRESS
  URGENT
}

enum RequestType {
  INCIDENT
  AUTOMATED
}

model ServiceRequest {
  id              Int                  @id @default(autoincrement())
  title           String               @db.VarChar(150)
  description     String?              @db.VarChar(500)
  status          RequestStatus        @default(PENDING)
  servicelocation Location?            @relation(fields: [locationId], references: [id])
  locationId      Int?                 @unique
  requestType     RequestType
  serviceTypes    ServiceRequestType[]
  invoices        Invoice[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime?            @updatedAt
}

model ServiceRequestType {
  id               Int            @id @default(autoincrement())
  priority         Priority
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId Int
  serviceType      ServiceType    @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId    Int
}

model ServiceType {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(150)
  description String?              @db.VarChar(500)
  workflow    Workflow[]
  requests    ServiceRequestType[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?            @updatedAt
}

model Invoice {
  id        Int             @id @default(autoincrement())
  amount    Float
  tax       Float
  currency  String?         @db.VarChar(10)
  status    InvoiceStatus   @default(PENDING)
  request   ServiceRequest? @relation(fields: [requestId], references: [id])
  requestId Int
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
}

model CurrencyCode {
  id          Int    @id @default(autoincrement())
  code        String @db.VarChar(10)
  description String @db.VarChar(50)
}

model Workflow {
  id            Int         @id @default(autoincrement())
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  steps         String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Location {
  id             Int             @id @default(autoincrement())
  address        String          @db.VarChar(250)
  city           String          @db.VarChar(150)
  state          String          @db.VarChar(100)
  zipCode        String          @db.VarChar(20)
  landmark       String?         @db.VarChar(10)
  latitude       Float
  longitude      Float
  ServiceRequest ServiceRequest?
}

//Territory and Scheduling
